// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api/proto/quote/quote_service.proto

package quotepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QuoteServiceClient is the client API for QuoteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuoteServiceClient interface {
	CreateQuote(ctx context.Context, in *CreateQuoteRequest, opts ...grpc.CallOption) (*CreateQuoteResponse, error)
	ListQuote(ctx context.Context, in *ListQuoteRequest, opts ...grpc.CallOption) (*ListQuoteResponse, error)
	DetailQuote(ctx context.Context, in *DetailQuoteRequest, opts ...grpc.CallOption) (*DetailQuoteResponse, error)
	UpdateQuote(ctx context.Context, in *UpdateQuoteRequest, opts ...grpc.CallOption) (*UpdateQuoteResponse, error)
	DeleteQuote(ctx context.Context, in *DeleteQuoteRequest, opts ...grpc.CallOption) (*DeleteQuoteResponse, error)
}

type quoteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQuoteServiceClient(cc grpc.ClientConnInterface) QuoteServiceClient {
	return &quoteServiceClient{cc}
}

func (c *quoteServiceClient) CreateQuote(ctx context.Context, in *CreateQuoteRequest, opts ...grpc.CallOption) (*CreateQuoteResponse, error) {
	out := new(CreateQuoteResponse)
	err := c.cc.Invoke(ctx, "/api.proto.quote.QuoteService/CreateQuote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quoteServiceClient) ListQuote(ctx context.Context, in *ListQuoteRequest, opts ...grpc.CallOption) (*ListQuoteResponse, error) {
	out := new(ListQuoteResponse)
	err := c.cc.Invoke(ctx, "/api.proto.quote.QuoteService/ListQuote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quoteServiceClient) DetailQuote(ctx context.Context, in *DetailQuoteRequest, opts ...grpc.CallOption) (*DetailQuoteResponse, error) {
	out := new(DetailQuoteResponse)
	err := c.cc.Invoke(ctx, "/api.proto.quote.QuoteService/DetailQuote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quoteServiceClient) UpdateQuote(ctx context.Context, in *UpdateQuoteRequest, opts ...grpc.CallOption) (*UpdateQuoteResponse, error) {
	out := new(UpdateQuoteResponse)
	err := c.cc.Invoke(ctx, "/api.proto.quote.QuoteService/UpdateQuote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quoteServiceClient) DeleteQuote(ctx context.Context, in *DeleteQuoteRequest, opts ...grpc.CallOption) (*DeleteQuoteResponse, error) {
	out := new(DeleteQuoteResponse)
	err := c.cc.Invoke(ctx, "/api.proto.quote.QuoteService/DeleteQuote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuoteServiceServer is the server API for QuoteService service.
// All implementations must embed UnimplementedQuoteServiceServer
// for forward compatibility
type QuoteServiceServer interface {
	CreateQuote(context.Context, *CreateQuoteRequest) (*CreateQuoteResponse, error)
	ListQuote(context.Context, *ListQuoteRequest) (*ListQuoteResponse, error)
	DetailQuote(context.Context, *DetailQuoteRequest) (*DetailQuoteResponse, error)
	UpdateQuote(context.Context, *UpdateQuoteRequest) (*UpdateQuoteResponse, error)
	DeleteQuote(context.Context, *DeleteQuoteRequest) (*DeleteQuoteResponse, error)
	mustEmbedUnimplementedQuoteServiceServer()
}

// UnimplementedQuoteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQuoteServiceServer struct {
}

func (UnimplementedQuoteServiceServer) CreateQuote(context.Context, *CreateQuoteRequest) (*CreateQuoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuote not implemented")
}
func (UnimplementedQuoteServiceServer) ListQuote(context.Context, *ListQuoteRequest) (*ListQuoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQuote not implemented")
}
func (UnimplementedQuoteServiceServer) DetailQuote(context.Context, *DetailQuoteRequest) (*DetailQuoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetailQuote not implemented")
}
func (UnimplementedQuoteServiceServer) UpdateQuote(context.Context, *UpdateQuoteRequest) (*UpdateQuoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQuote not implemented")
}
func (UnimplementedQuoteServiceServer) DeleteQuote(context.Context, *DeleteQuoteRequest) (*DeleteQuoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQuote not implemented")
}
func (UnimplementedQuoteServiceServer) mustEmbedUnimplementedQuoteServiceServer() {}

// UnsafeQuoteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuoteServiceServer will
// result in compilation errors.
type UnsafeQuoteServiceServer interface {
	mustEmbedUnimplementedQuoteServiceServer()
}

func RegisterQuoteServiceServer(s grpc.ServiceRegistrar, srv QuoteServiceServer) {
	s.RegisterService(&QuoteService_ServiceDesc, srv)
}

func _QuoteService_CreateQuote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQuoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuoteServiceServer).CreateQuote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.proto.quote.QuoteService/CreateQuote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuoteServiceServer).CreateQuote(ctx, req.(*CreateQuoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuoteService_ListQuote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQuoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuoteServiceServer).ListQuote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.proto.quote.QuoteService/ListQuote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuoteServiceServer).ListQuote(ctx, req.(*ListQuoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuoteService_DetailQuote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetailQuoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuoteServiceServer).DetailQuote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.proto.quote.QuoteService/DetailQuote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuoteServiceServer).DetailQuote(ctx, req.(*DetailQuoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuoteService_UpdateQuote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQuoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuoteServiceServer).UpdateQuote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.proto.quote.QuoteService/UpdateQuote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuoteServiceServer).UpdateQuote(ctx, req.(*UpdateQuoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuoteService_DeleteQuote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQuoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuoteServiceServer).DeleteQuote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.proto.quote.QuoteService/DeleteQuote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuoteServiceServer).DeleteQuote(ctx, req.(*DeleteQuoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QuoteService_ServiceDesc is the grpc.ServiceDesc for QuoteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuoteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.proto.quote.QuoteService",
	HandlerType: (*QuoteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateQuote",
			Handler:    _QuoteService_CreateQuote_Handler,
		},
		{
			MethodName: "ListQuote",
			Handler:    _QuoteService_ListQuote_Handler,
		},
		{
			MethodName: "DetailQuote",
			Handler:    _QuoteService_DetailQuote_Handler,
		},
		{
			MethodName: "UpdateQuote",
			Handler:    _QuoteService_UpdateQuote_Handler,
		},
		{
			MethodName: "DeleteQuote",
			Handler:    _QuoteService_DeleteQuote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/quote/quote_service.proto",
}
